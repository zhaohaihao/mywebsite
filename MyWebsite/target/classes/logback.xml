<?xml version="1.0" encoding="UTF-8"?>
<!--http://aub.iteye.com/blog/1101260  学习资料-->
<!--	配置主节点
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--通用的变量-->
	<property name="APP_NAME" value="TimeManage" />
	<property name="LOG_DIR" >${CATALINA_HOME}/logs</property>
	
	
	
	
	<!--	设置上下文名称
		每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
	-->
	<contextName>${APP_NAME}</contextName>
	
	
	<!--	标准输出 输出器
	子节点：
	<encoder>：对日志进行格式化。
	<target>：字符串 System.out 或者 System.err ，默认 System.out ；
	 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">   
	    <encoder>
	    	<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
	    </encoder>
	</appender>
	
	
	
	<!--文件 输出器 
	子节点：
	<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
	<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
	<encoder>：对记录事件进行格式化。
	<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
	-->
<!-- 	<appender name="FILE" class="ch.qos.logback.core.FileAppender">  
		<file>${LOG_DIR}/${APP_NAME}.log</file>  
	   	<append>true</append>
	   	<encoder>  
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
	   	</encoder>
	</appender> -->
	
	
	
	<!--	滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
		<rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		<triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
		<prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
		
		rollingPolicy：
			TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
				<fileNamePattern>:
				必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。 RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
				<maxHistory>:
				可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且 <maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。
			
			FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
				<minIndex>:窗口索引最小值
				<maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
				<fileNamePattern >:
				必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
		triggeringPolicy:
			SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知 RollingFileAppender 触发当前活动文件滚动。只有一个节点:
			<maxFileSize>:这是活动文件的大小，默认值是10MB。
	-->
	<appender name="ROLL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/${APP_NAME}.log</file>
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	      <fileNamePattern>${LOG_DIR}/${APP_NAME}_%d{yyyyMMdd}_%i</fileNamePattern>   
	      <maxHistory>30</maxHistory>
	      <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
          	<maxFileSize>500MB</maxFileSize>
          </timeBasedFileNamingAndTriggeringPolicy>
	    </rollingPolicy>
	   
	    <encoder>   
	    	<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
	    </encoder>   
  	</appender>
  	
	
		<!--logger 
	name:用来指定受此loger约束的某一个包或者具体的某一个类。
	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
			如果未设置此属性，那么当前loger将会继承上级的级别。
	addtivity:是否向上级logger传递打印信息。默认是true。
	<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
	-->
	<!-- <logger name="com.pook" level="DEBUG">   
		<appender-ref ref="STDOUT" />
	</logger> -->
	
	
	
	<!--logger 
	name:用来指定受此loger约束的某一个包或者具体的某一个类。
	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
			如果未设置此属性，那么当前loger将会继承上级的级别。
	addtivity:是否向上级logger传递打印信息。默认是true。
	<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
	-->
	<!-- <logger name="com.pook" level="DEBUG">   
		<appender-ref ref="STDOUT" />
	</logger> -->
	
	<!-- 根（也是一种logger,最上层的logger）配置
		level：打印级别
		<appender-ref ref="STDOUT" />
	-->
	<root level="INFO">             
		<appender-ref ref="STDOUT" />
		<appender-ref ref="ROLL_FILE" />
	</root>
	
<!-- 	<logger name="org.apache.ibatis" level="DEBUG">
		<appender-ref ref="STDOUT"/>
	</logger> -->
</configuration>
